# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import agents_pb2 as agents__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2

GRPC_GENERATED_VERSION = '1.76.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + ' but the generated code in agents_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class SigprintServiceStub(object):
    """Sigprint service: offered by sigprint_agent to provide latest brain-state signature.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetLatestSigprint = channel.unary_unary(
                '/agents.SigprintService/GetLatestSigprint',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=agents__pb2.SigprintUpdate.FromString,
                _registered_method=True)


class SigprintServiceServicer(object):
    """Sigprint service: offered by sigprint_agent to provide latest brain-state signature.
    """

    def GetLatestSigprint(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SigprintServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetLatestSigprint': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLatestSigprint,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=agents__pb2.SigprintUpdate.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'agents.SigprintService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('agents.SigprintService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class SigprintService(object):
    """Sigprint service: offered by sigprint_agent to provide latest brain-state signature.
    """

    @staticmethod
    def GetLatestSigprint(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/agents.SigprintService/GetLatestSigprint',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            agents__pb2.SigprintUpdate.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class LedgerServiceStub(object):
    """Ledger service: offered by Limnus to commit a new ledger block.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CommitEntry = channel.unary_unary(
                '/agents.LedgerService/CommitEntry',
                request_serializer=agents__pb2.LedgerEntry.SerializeToString,
                response_deserializer=agents__pb2.Ack.FromString,
                _registered_method=True)


class LedgerServiceServicer(object):
    """Ledger service: offered by Limnus to commit a new ledger block.
    """

    def CommitEntry(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LedgerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CommitEntry': grpc.unary_unary_rpc_method_handler(
                    servicer.CommitEntry,
                    request_deserializer=agents__pb2.LedgerEntry.FromString,
                    response_serializer=agents__pb2.Ack.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'agents.LedgerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('agents.LedgerService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class LedgerService(object):
    """Ledger service: offered by Limnus to commit a new ledger block.
    """

    @staticmethod
    def CommitEntry(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/agents.LedgerService/CommitEntry',
            agents__pb2.LedgerEntry.SerializeToString,
            agents__pb2.Ack.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class GardenServiceStub(object):
    """Garden service: offered by Garden to receive narrative-trigger events.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.NotifyEvent = channel.unary_unary(
                '/agents.GardenService/NotifyEvent',
                request_serializer=agents__pb2.GardenEvent.SerializeToString,
                response_deserializer=agents__pb2.Ack.FromString,
                _registered_method=True)


class GardenServiceServicer(object):
    """Garden service: offered by Garden to receive narrative-trigger events.
    """

    def NotifyEvent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GardenServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'NotifyEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.NotifyEvent,
                    request_deserializer=agents__pb2.GardenEvent.FromString,
                    response_serializer=agents__pb2.Ack.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'agents.GardenService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('agents.GardenService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class GardenService(object):
    """Garden service: offered by Garden to receive narrative-trigger events.
    """

    @staticmethod
    def NotifyEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/agents.GardenService/NotifyEvent',
            agents__pb2.GardenEvent.SerializeToString,
            agents__pb2.Ack.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
